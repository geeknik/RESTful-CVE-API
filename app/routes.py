import sqlite3
from flask import jsonify, request
from app import app

@app.route('/cve/<cve_id>', methods=['GET'])
def get_cve(cve_id):
    #connecting to database
    conn = sqlite3.connect('cve_db.db')
    #Getting the data as a dictionary to avoid mapping them using index
    conn.row_factory = sqlite3.Row
    #creating a cursor to execute SQL queries
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM cve_database WHERE cve_id = ?', (cve_id,))
    cve = cursor.fetchone()
    conn.close()

    if cve:
        cve_data = {
            "cve_id": cve["cve_id"],
            "severity": cve["severity"],
            "cvss": cve["cvss"],
            "affected_package": cve["affected_packages"],
            "description": cve["description"],
            "cwe_id": cve["cwe_id"]
        }
        return jsonify(cve_data), 200
    else:
        return jsonify({"error": "CVE not found"}), 404


@app.route('/cve/all', methods=['GET'])
def get_all_cves():
    conn = sqlite3.connect('cve_db.db')
    conn.row_factory = sqlite3.Row  # Fetch rows as dictionaries
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM cve_database')
    cves = cursor.fetchall()
    conn.close()

    #converting CVE data to a list of dictionaries
    cves_list = []
    for cve in cves:
        cve_data = {
            "cve_id": cve["cve_id"],
            "severity": cve["severity"],
            "cvss": cve["cvss"],
            "affected_package": cve["affected_packages"],
            "description": cve["description"],
            "cwe_id": cve["cwe_id"]
        }
        cves_list.append(cve_data)

    return jsonify(cves_list)

@app.route('/cve/addCVE', methods=['POST'])
def add_cve():
    data = request.get_json()

    cve_id = data.get('cve_id')
    severity = data.get('severity')
    cvss = data.get('cvss')
    affected_packages = data.get('affected_packages')
    description = data.get('description')
    cwe_id = data.get('cwe_id')

    if not all([cve_id, severity, cvss, affected_packages, description, cwe_id]):
        return jsonify({"error": "Missing required fields"}), 400

    conn = sqlite3.connect('cve_db.db')
    cursor = conn.cursor()

    cursor.execute('SELECT COUNT(*) FROM cve_database WHERE cve_id = ?', (cve_id,))
    existing_cve_count = cursor.fetchone()[0]
    if existing_cve_count > 0:
        return jsonify({"error": "CVE ID already exists"}), 409
    
    cursor.execute('''INSERT INTO cve_database (cve_id, severity, cvss, affected_packages, description, cwe_id)
                      VALUES (?, ?, ?, ?, ?, ?)''',
                   (cve_id, severity, cvss, affected_packages, description, cwe_id))
    conn.commit()
    conn.close()

    return jsonify({"message": "CVE created successfully"}), 201

@app.route('/cve/<cve_id>', methods=['DELETE'])
def delete_cve(cve_id):
    conn = sqlite3.connect('cve_db.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM cve_database WHERE cve_id = ?', (cve_id,))

    cve = cursor.fetchone()
    if not cve:
        conn.close()
        return jsonify({"error": "CVE not found"})
    
    cursor.execute('DELETE FROM cve_database WHERE cve_id = ?', (cve_id,))
    conn.commit()
    conn.close

    return jsonify({"message": "CVE deleted successfully"}), 200

@app.route('/cve/<cve_id>', methods=['PUT'])
def update_cve(cve_id):
    data = request.get_json()

    #extracting the data using request
    severity = data.get('severity')
    cvss = data.get('cvss')
    affected_packages = data.get('affected_packages')
    description = data.get('description')
    cwe_id = data.get('cwe_id')

    #checking if all the fields are entered correctly
    if not all([severity, cvss, affected_packages, description, cwe_id]):
        return jsonify({"error": "Missing required fields"}), 400

    conn = sqlite3.connect('cve_db.db')
    cursor = conn.cursor()

    #checking if the mentioned id is present in the table
    cursor.execute('SELECT * FROM cve_database WHERE cve_id = ?', (cve_id,))
    existing_cve = cursor.fetchone()
    if not existing_cve:
        conn.close()
        return jsonify({"error": "CVE not found"}), 404

    #Updating the cve entry using the id
    cursor.execute('''UPDATE cve_database
                      SET severity = ?, cvss = ?, affected_packages = ?, description = ?, cwe_id = ?
                      WHERE cve_id = ?''',
                   (severity, cvss, affected_packages, description, cwe_id, cve_id))
    conn.commit()
    conn.close()

    return jsonify({"message": "CVE updated successfully"}), 200

